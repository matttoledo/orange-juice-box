name: CI/CD Pipeline (Full Self-hosted)

# Full Self-hosted: Todos os jobs no Orange Pi
# Feedback visual: ID√äNTICO ao h√≠brido
# Vantagens: Privacidade total, minutos ilimitados, cache Maven persistente

on:
  push:
    branches: [ main, develop, prod ]
    paths:
      - 'src/**'
      - 'pom.xml'
      - 'Dockerfile*'
      - '.github/workflows/**'
  pull_request:
    branches: [ main, prod ]
    paths:
      - 'src/**'
      - 'pom.xml'
      - 'Dockerfile*'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ============================================
  # JOB 1: TESTES (Orange Pi üçä)
  # ============================================
  test:
    name: Run Tests
    runs-on: self-hosted
    permissions:
      contents: read
      checks: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run tests
      run: mvn clean verify -DskipSpotless=true
      env:
        SPRING_PROFILES_ACTIVE: test

    - name: Generate test report
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Maven Tests
        path: target/surefire-reports/*.xml
        reporter: java-junit

  # ============================================
  # JOB 2: BUILD (Orange Pi üçä)
  # ============================================
  build:
    name: Build Application
    runs-on: self-hosted
    needs: test
    if: github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build application
      run: mvn clean package -DskipTests -DskipSpotless=true

    - name: Upload JAR artifact
      uses: actions/upload-artifact@v4
      with:
        name: app-jar
        path: target/*.jar
        retention-days: 1

  # ============================================
  # JOB 3: DOCKER BUILD (Orange Pi üçä)
  # ============================================
  docker:
    name: Build and Push Docker Image
    runs-on: self-hosted
    needs: build
    if: github.event_name == 'push'
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download JAR artifact
      uses: actions/download-artifact@v4
      with:
        name: app-jar
        path: target/

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver-opts: |
          image=moby/buildkit:latest
          network=host

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=production,enable=${{ github.ref == 'refs/heads/prod' }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.ci
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: |
          type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache
          type=gha
        cache-to: |
          type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache,mode=max
          type=gha,mode=max
        platforms: linux/arm64

  # ============================================
  # JOB 4: DEPLOY (Orange Pi üçä)
  # ============================================
  deploy:
    name: Deploy to Docker Swarm
    runs-on: self-hosted
    needs: docker
    if: github.ref == 'refs/heads/prod'
    environment: production

    steps:
      - name: Deploy to Docker Swarm
        run: |
          # Login no registry
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin

          # Pull da nova imagem
          docker pull ${{ env.REGISTRY }}/${{ github.repository }}:latest

          # ‚ö†Ô∏è AJUSTAR: Nome do servi√ßo no Docker Swarm
          SERVICE_NAME="seu_stack_seu-service"

          if docker service inspect $SERVICE_NAME >/dev/null 2>&1; then
            echo "‚úÖ Servi√ßo encontrado: $SERVICE_NAME"

            CURRENT_IMAGE=$(docker service inspect $SERVICE_NAME --format='{{.Spec.TaskTemplate.ContainerSpec.Image}}')
            echo "üì∏ Imagem atual: $CURRENT_IMAGE"

            # Atualizar com rollback autom√°tico
            docker service update \
              --image ${{ env.REGISTRY }}/${{ github.repository }}:latest \
              --update-parallelism 1 \
              --update-delay 10s \
              --update-order start-first \
              --update-failure-action rollback \
              --update-monitor 30s \
              --update-max-failure-ratio 0.5 \
              --rollback-parallelism 1 \
              --rollback-delay 0s \
              --rollback-order stop-first \
              --rollback-monitor 10s \
              --rollback-max-failure-ratio 0 \
              --with-registry-auth \
              $SERVICE_NAME
          else
            echo "‚ùå Servi√ßo $SERVICE_NAME n√£o encontrado!"
            echo "üí° Rode: docker stack deploy -c docker-compose.yml seu_stack"
            exit 1
          fi

          docker image prune -f --filter "until=24h"

      - name: Verify deployment
        run: |
          SERVICE_NAME="seu_stack_seu-service"
          # ‚ö†Ô∏è AJUSTAR: URL do health check
          HEALTH_URL="http://192.168.0.2/seu-app/actuator/health"
          MAX_ATTEMPTS=60
          SLEEP_TIME=5

          echo "=== Verificando health do servi√ßo ==="

          for i in $(seq 1 $MAX_ATTEMPTS); do
            RUNNING=$(docker service ps "$SERVICE_NAME" --filter "desired-state=running" --format "{{.CurrentState}}" | grep -c "Running" || echo "0")
            TOTAL=$(docker service inspect "$SERVICE_NAME" --format='{{.Spec.Mode.Replicated.Replicas}}')

            # Verificar Docker health interno
            TASK_ID=$(docker service ps "$SERVICE_NAME" --filter "desired-state=running" --format "{{.ID}}" --no-trunc | head -1)
            if [ -n "$TASK_ID" ]; then
              CONTAINER_ID=$(docker inspect "$TASK_ID" --format='{{.Status.ContainerStatus.ContainerID}}' 2>/dev/null || echo "")
              if [ -n "$CONTAINER_ID" ]; then
                DOCKER_HEALTH=$(docker inspect "$CONTAINER_ID" --format='{{.State.Health.Status}}' 2>/dev/null || echo "none")
              else
                DOCKER_HEALTH="unknown"
              fi
            else
              DOCKER_HEALTH="no-task"
            fi

            echo "[$i/$MAX_ATTEMPTS] Tasks: $RUNNING/$TOTAL | Health: $DOCKER_HEALTH"

            if [ "$RUNNING" -ge "$TOTAL" ] && [ "$DOCKER_HEALTH" = "healthy" ]; then
              HTTP_CODE=$(curl -s -o /tmp/health.json -w "%{http_code}" "$HEALTH_URL" || echo "000")

              if [ "$HTTP_CODE" = "200" ]; then
                HEALTH_STATUS=$(python3 -c "import json; print(json.load(open('/tmp/health.json')).get('status', 'UNKNOWN'))" 2>/dev/null || echo "UNKNOWN")

                if [ "$HEALTH_STATUS" = "UP" ]; then
                  echo "‚úÖ Deploy verificado com sucesso!"
                  echo "   HTTP: $HTTP_CODE | Status: $HEALTH_STATUS"
                  docker service logs --tail 20 "$SERVICE_NAME"
                  exit 0
                fi
              fi
            fi

            # Detectar rollback
            UPDATE_STATE=$(docker service inspect "$SERVICE_NAME" --format='{{.UpdateStatus.State}}' 2>/dev/null || echo "unknown")
            if [ "$UPDATE_STATE" = "rollback_completed" ]; then
              echo "‚ùå Rollback autom√°tico executado!"
              docker service logs --tail 100 "$SERVICE_NAME"
              exit 1
            fi

            sleep $SLEEP_TIME
          done

          echo "‚ùå Timeout ap√≥s $((MAX_ATTEMPTS * SLEEP_TIME))s"
          docker service logs --tail 100 "$SERVICE_NAME"
          exit 1

      - name: Notify deployment status
        if: always()
        run: |
          if [ ${{ job.status }} == 'success' ]; then
            echo "‚úÖ Deployment successful!"
          else
            echo "‚ùå Deployment failed!"
          fi
